<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.kylin.job.mapper.JobLockMapper">
  <resultMap id="BaseResultMap" type="org.apache.kylin.job.domain.JobLock">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="lock_id" jdbcType="VARCHAR" property="lockId" />
    <result column="lock_node" jdbcType="VARCHAR" property="lockNode" />
    <result column="lock_expire_time" jdbcType="TIMESTAMP" property="lockExpireTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, lock_id, lock_node, lock_expire_time, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ${jobLockTable}
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ${jobLockTable}
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteAllJobLock">
    delete from ${jobLockTable}
  </delete>
  <insert id="insert" parameterType="org.apache.kylin.job.domain.JobLock">
    insert into ${jobLockTable} (id, lock_id, lock_node, 
      lock_expire_time, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{lockId,jdbcType=VARCHAR}, #{lockNode,jdbcType=VARCHAR}, 
      #{lockExpireTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.apache.kylin.job.domain.JobLock">
    insert into ${jobLockTable}
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="lockId != null">
        lock_id,
      </if>
      <if test="lockNode != null">
        lock_node,
      </if>
      <if test="lockExpireTime != null">
        lock_expire_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="lockId != null">
        #{lockId,jdbcType=VARCHAR},
      </if>
      <if test="lockNode != null">
        #{lockNode,jdbcType=VARCHAR},
      </if>
      <if test="lockExpireTime != null">
        #{lockExpireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.apache.kylin.job.domain.JobLock">
    update ${jobLockTable}
    <set>
      <if test="lockId != null">
        lock_id = #{lockId,jdbcType=VARCHAR},
      </if>
      <if test="lockNode != null">
        lock_node = #{lockNode,jdbcType=VARCHAR},
      </if>
      <if test="lockExpireTime != null">
        lock_expire_time = #{lockExpireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.apache.kylin.job.domain.JobLock">
    update ${jobLockTable}
    set lock_id = #{lockId,jdbcType=VARCHAR},
      lock_node = #{lockNode,jdbcType=VARCHAR},
      lock_expire_time = #{lockExpireTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="findNodeByLockId" resultType="java.lang.String">
    SELECT lock_node
    FROM ${jobLockTable}
    WHERE lock_id = #{lockId,jdbcType=VARCHAR}
  </select>

  <select id="findCount" resultType="int">
    SELECT count(1)
    FROM ${jobLockTable}
  </select>

  <insert id="upsertLock">
    insert into ${jobLockTable}
    <trim prefix="(" suffix=")" suffixOverrides=",">
      lock_id,
      <if test="lockNode != null">
        lock_node,
        lock_expire_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{lockId,jdbcType=VARCHAR},
      <if test="lockNode != null">
        #{lockNode,jdbcType=VARCHAR},
        TIMESTAMPADD(SECOND,#{renewalSec,jdbcType=BIGINT},CURRENT_TIMESTAMP),
      </if>
    </trim>
    on duplicate key update
    <trim suffixOverrides=",">
      id = id,
      <if test="lockNode != null">
        lock_node = CASE WHEN lock_expire_time IS NULL OR lock_expire_time <![CDATA[<]]> CURRENT_TIMESTAMP THEN VALUES(lock_node) ELSE lock_node END,
        lock_expire_time = CASE WHEN lock_node = VALUES(lock_node) OR lock_expire_time IS NULL OR lock_expire_time <![CDATA[<]]> CURRENT_TIMESTAMP THEN VALUES(lock_expire_time) ELSE lock_expire_time END,
      </if>
    </trim>
  </insert>

  <delete id="removeLock">
    delete from ${jobLockTable}
    where lock_id = #{lockId,jdbcType=VARCHAR}
    <if test="lockNode != null">
      AND lock_node = #{lockNode,jdbcType=VARCHAR}
    </if>
  </delete>

  <select id="findNonLockIdList" resultType="java.lang.String">
    SELECT lock_id
    FROM ${jobLockTable}
    WHERE lock_node IS NULL OR lock_expire_time <![CDATA[<]]> CURRENT_TIMESTAMP
    <if test="batchSize&gt;=0">
      LIMIT #{batchSize,jdbcType=INTEGER}
    </if>
  </select>

</mapper>