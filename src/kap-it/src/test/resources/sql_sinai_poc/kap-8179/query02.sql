--
-- Copyright (C) 2020 Kyligence Inc. All rights reserved.
--
-- http://kyligence.io
--
-- This software is the confidential and proprietary information of
-- Kyligence Inc. ("Confidential Information"). You shall not disclose
-- such Confidential Information and shall use it only in accordance
-- with the terms of the license agreement you entered into with
-- Kyligence Inc.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--
SELECT "t2"."X_measure__3" AS "TEMP_2016_2017_ED_Visits_Prov__copy___2090987519__0_",
"t5"."X_measure__7" AS "TEMP_2016_2017_ED_Visits_Prov__copy___442110034__0_",  
"t8"."X_measure__11" AS "avg_2016_2017_ED_Visits_Practice__copy__ok",
"t2"."X_measure__19" AS "avg_Practice_ED_Visits_k_LOD_Month_Year_2017__copy__ok",
"t5"."X_measure__15" AS "avg_Practice_ED_Visits_k_LOD_Month_Year__copy_2__ok"
FROM (   SELECT AVG("t1"."Xtemp1") AS "X_measure__19", AVG("t1"."Xtemp0") AS "X_measure__3"
FROM (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE",
"Z_PROVDASH_UM_ED"."EFFMONTH" AS "EFFMONTH",
"Z_PROVDASH_UM_ED"."EFFYEAR" AS "EFFYEAR"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
WHERE (('Utilization Management' = 'Utilization Management')
AND ("Z_PROVDASH_UM_ED"."FULL_NAME" = 'JONATHAN AREND'))
GROUP BY "Z_PROVDASH_UM_ED"."EFFYEAR", "Z_PROVDASH_UM_ED"."EFFMONTH", "Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE") "t0"
INNER JOIN (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE",
"Z_PROVDASH_UM_ED"."EFFMONTH" AS "EFFMONTH",
"Z_PROVDASH_UM_ED"."EFFYEAR" AS "EFFYEAR",
{fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} AS "X_measure__0",
SUM("Z_PROVDASH_UM_ED"."ED_VISITS") AS "X_measure__1",
{fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} AS "X_measure__16",
SUM("Z_PROVDASH_UM_ED"."ED_VISITS") AS "X_measure__17",
SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") AS "X_measure__18",
SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") AS "X_measure__2",
(CASE WHEN ({fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} < 2017)
THEN (SUM("Z_PROVDASH_UM_ED"."ED_VISITS") * ((CASE WHEN SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") = 0
THEN NULL ELSE 12 / SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") END) * 1000)) ELSE NULL END) AS "Xtemp0",
(CASE WHEN ({fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} < 2017)
THEN (SUM("Z_PROVDASH_UM_ED"."ED_VISITS") * ((CASE WHEN SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") = 0
THEN NULL ELSE 12 / SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") END) * 1000)) ELSE NULL END) AS "Xtemp1"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
GROUP BY "Z_PROVDASH_UM_ED"."EFFYEAR",
"Z_PROVDASH_UM_ED"."EFFMONTH",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE"   ) "t1"
ON (("t0"."Calculation_59954192150036482" = "t1"."Calculation_59954192150036482")
AND (("t0"."EFFYEAR" = "t1"."EFFYEAR") OR (("t0"."EFFYEAR" IS NULL) AND ("t1"."EFFYEAR" IS NULL)))
AND (("t0"."EFFMONTH" = "t1"."EFFMONTH") OR (("t0"."EFFMONTH" IS NULL) AND ("t1"."EFFMONTH" IS NULL)))
AND (("t0"."DEFAULT_PRACTICE" = "t1"."DEFAULT_PRACTICE") OR (("t0"."DEFAULT_PRACTICE" IS NULL)
AND ("t1"."DEFAULT_PRACTICE" IS NULL))))
HAVING (COUNT(1) > 0) ) "t2"
CROSS JOIN (   SELECT AVG("t4"."Xtemp3") AS "X_measure__15",
AVG("t4"."Xtemp2") AS "X_measure__7"
FROM (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE",
"Z_PROVDASH_UM_ED"."EFFYEAR" AS "EFFYEAR"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
WHERE (('Utilization Management' = 'Utilization Management')
AND ("Z_PROVDASH_UM_ED"."FULL_NAME" = 'JONATHAN AREND'))
GROUP BY "Z_PROVDASH_UM_ED"."EFFYEAR", "Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE"   ) "t3"
INNER JOIN (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE",
"Z_PROVDASH_UM_ED"."EFFYEAR" AS "EFFYEAR",
{fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} AS "X_measure__12",
SUM("Z_PROVDASH_UM_ED"."ED_VISITS") AS "X_measure__13",
SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") AS "X_measure__14",
{fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} AS "X_measure__4",
SUM("Z_PROVDASH_UM_ED"."ED_VISITS") AS "X_measure__5",
SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") AS "X_measure__6",
(CASE WHEN ({fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} > 2016)
THEN (SUM("Z_PROVDASH_UM_ED"."ED_VISITS") * ((CASE WHEN SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") = 0
THEN NULL ELSE 12 / SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") END) * 1000)) ELSE NULL END) AS "Xtemp2",
(CASE WHEN ({fn CONVERT(MIN({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}), SQL_DOUBLE)} > 2016)
THEN (SUM("Z_PROVDASH_UM_ED"."ED_VISITS") * ((CASE WHEN SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") = 0
THEN NULL ELSE 12 / SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") END) * 1000)) ELSE NULL END) AS "Xtemp3"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
GROUP BY "Z_PROVDASH_UM_ED"."EFFYEAR",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE") "t4"
ON (("t3"."Calculation_59954192150036482" = "t4"."Calculation_59954192150036482")
AND (("t3"."EFFYEAR" = "t4"."EFFYEAR") OR (("t3"."EFFYEAR" IS NULL) AND ("t4"."EFFYEAR" IS NULL)))
AND (("t3"."DEFAULT_PRACTICE" = "t4"."DEFAULT_PRACTICE") OR (("t3"."DEFAULT_PRACTICE" IS NULL)
AND ("t4"."DEFAULT_PRACTICE" IS NULL))))
HAVING (COUNT(1) > 0) ) "t5"
CROSS JOIN (   SELECT AVG("t7"."Xtemp1_output") AS "X_measure__11"
FROM (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
WHERE (('Utilization Management' = 'Utilization Management') AND ("Z_PROVDASH_UM_ED"."FULL_NAME" = 'JONATHAN AREND'))
GROUP BY "Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE"   ) "t6"
INNER JOIN (     SELECT 'Source UM' AS "Calculation_59954192150036482",
"Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE" AS "DEFAULT_PRACTICE",
(CASE WHEN (AVG({fn CONVERT({fn CONVERT({fn TRUNCATE("Z_PROVDASH_UM_ED"."EFFYEAR",0)}, SQL_BIGINT)}, SQL_DOUBLE)}) < 2017)
THEN (0.94999999999999996 * (SUM("Z_PROVDASH_UM_ED"."ED_VISITS") * ((CASE WHEN SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") = 0
THEN NULL ELSE 12 / SUM("Z_PROVDASH_UM_ED"."MEMBER_MONTHS") END) * 1000))) ELSE NULL END) AS "Xtemp1_output"
FROM "POPHEALTH_ANALYTICS"."Z_PROVDASH_UM_ED" "Z_PROVDASH_UM_ED"
GROUP BY "Z_PROVDASH_UM_ED"."DEFAULT_PRACTICE"   ) "t7"
ON (("t6"."Calculation_59954192150036482" = "t7"."Calculation_59954192150036482")
AND (("t6"."DEFAULT_PRACTICE" = "t7"."DEFAULT_PRACTICE") OR (("t6"."DEFAULT_PRACTICE" IS NULL)
AND ("t7"."DEFAULT_PRACTICE" IS NULL))))   HAVING (COUNT(1) > 0) ) "t8";