## Copyright (C) 2016 Kyligence Inc. All rights reserved.
##
## http://kyligence.io
##
## This software is the confidential and proprietary information of
## Kyligence Inc. ("Confidential Information"). You shall not disclose
## such Confidential Information and shall use it only in accordance
## with the terms of the license agreement you entered into with
## Kyligence Inc.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

###JDBC METASTORE
create.metadata.store.table=create table if not exists %s ( \
  %s varchar(255) primary key COLLATE "C", \
  %s bytea, \
  %s bigint, \
  %s bigint \
);

create.auditlog.store.table=create table if not exists %s ( \
  id bigserial primary key, \
  %s varchar(255) COLLATE "C", \
  %s bytea, \
  %s bigint, \
  %s bigint, \
  unit_id varchar(50), \
  operator varchar(100), \
  instance varchar(100) \
);

#### JDBC QUERYHISTORY STROE
create.queryhistory.store.table=CREATE TABLE IF NOT EXISTS %s ( \
    id  serial, \
    query_id  VARCHAR(50),  \
    sql_text  TEXT,  \
    sql_pattern  TEXT,  \
    duration  BIGINT,  \
    total_scan_bytes  BIGINT,  \
    total_scan_count  BIGINT,  \
    result_row_count  BIGINT,  \
    submitter  VARCHAR(255),  \
    realizations  TEXT,  \
    server  VARCHAR(50),  \
    error_type  VARCHAR(50),  \
    engine_type  VARCHAR(30),  \
    cache_hit  BOOLEAN,  \
    query_status  VARCHAR(20),  \
    index_hit  BOOLEAN,  \
    query_time  BIGINT,  \
    month  VARCHAR(10),  \
    query_first_day_of_month  BIGINT,  \
    query_first_day_of_week  BIGINT,  \
    query_day  BIGINT,  \
    is_table_index_used  BOOLEAN,  \
    is_agg_index_used  BOOLEAN,  \
    is_table_snapshot_used  BOOLEAN,  \
    project_name  VARCHAR(100),  \
    primary key ( id , project_name ) \
);

create.queryhistory.store.tableindex1=CREATE INDEX queryHistoryIndex1 ON %s USING btree ( query_time );
create.queryhistory.store.tableindex2=CREATE INDEX queryHistoryIndex2 ON %s USING btree ( query_first_day_of_month );
create.queryhistory.store.tableindex3=CREATE INDEX queryHistoryIndex3 ON %s USING btree ( query_first_day_of_week );
create.queryhistory.store.tableindex4=CREATE INDEX queryHistoryIndex4 ON %s USING btree ( query_day );
create.queryhistory.store.tableindex5=CREATE INDEX queryHistoryIndex5 ON %s USING btree ( duration );


create.queryhistoryrealization.store.table=CREATE TABLE IF NOT EXISTS %s ( \
    id  serial, \
    query_id  VARCHAR(255) , \
    model  VARCHAR(255),  \
    layout_id  VARCHAR(255), \
    index_type  VARCHAR(255),  \
    duration  BIGINT,  \
    query_time  BIGINT,  \
    project_name  VARCHAR(255), \
    primary key(id , project_name) \
);

create.queryhistoryrealization.store.tableindex1=CREATE INDEX queryHistoryRealizationIndex1 ON %s USING btree ( query_time );
create.queryhistoryrealization.store.tableindex2=CREATE INDEX queryHistoryRealizationIndex2 ON %s USING btree ( model );