## Copyright (C) 2016 Kyligence Inc. All rights reserved.
##
## http://kyligence.io
##
## This software is the confidential and proprietary information of
## Kyligence Inc. ("Confidential Information"). You shall not disclose
## such Confidential Information and shall use it only in accordance
## with the terms of the license agreement you entered into with
## Kyligence Inc.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

###JDBC METASTORE
create.metadata.store.table=create table if not exists %s ( \
  %s varchar(255) primary key COLLATE utf8_bin, \
  %s longblob, \
  %s bigint, \
  %s bigint \
);

create.auditlog.store.table=create table if not exists %s ( \
  id bigint auto_increment primary key, \
  %s varchar(255) COLLATE utf8_bin, \
  %s longblob, \
  %s bigint, \
  %s bigint, \
  unit_id varchar(50), \
  operator varchar(100), \
  instance varchar(100) \
);

#### JDBC QUERYHISTORY STROE
create.queryhistory.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
    id bigint not null auto_increment,  \
    `query_id` VARCHAR(50),  \
    `sql_text` TEXT,  \
    `sql_pattern` TEXT,  \
    `duration` BIGINT,  \
    `total_scan_bytes` BIGINT,  \
    `total_scan_count` BIGINT,  \
    `result_row_count` BIGINT,  \
    `submitter` VARCHAR(255),  \
    `realizations` TEXT,  \
    `server` VARCHAR(50),  \
    `error_type` VARCHAR(50),  \
    `engine_type` VARCHAR(30),  \
    `cache_hit` BOOLEAN,  \
    `query_status` VARCHAR(20),  \
    `index_hit` BOOLEAN,  \
    `query_time` BIGINT,  \
    `month` VARCHAR(10),  \
    `query_first_day_of_month` BIGINT,  \
    `query_first_day_of_week` BIGINT,  \
    `query_day` BIGINT,  \
    `is_table_index_used` BOOLEAN,  \
    `is_agg_index_used` BOOLEAN,  \
    `is_table_snapshot_used` BOOLEAN,  \
    `project_name` VARCHAR(100),  \
    `reserved_field_1` VARCHAR(50), \
    `reserved_field_2` VARCHAR(50), \
    `reserved_field_3` longblob, \
    `reserved_field_4` longblob, \
    primary key(`id`,`project_name`) \
);

create.queryhistory.store.tableindex1=ALTER table %s ADD INDEX %s_ix1(`query_time`);
create.queryhistory.store.tableindex2=ALTER table %s ADD INDEX %s_ix2(`query_first_day_of_month`);
create.queryhistory.store.tableindex3=ALTER table %s ADD INDEX %s_ix3(`query_first_day_of_week`);
create.queryhistory.store.tableindex4=ALTER table %s ADD INDEX %s_ix4(`query_day`);
create.queryhistory.store.tableindex5=ALTER table %s ADD INDEX %s_ix5(`duration`);

create.queryhistoryrealization.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
  id bigint not null auto_increment,  \
  `query_id` VARCHAR(255) , \
  `model` VARCHAR(255),  \
  `layout_id` VARCHAR(255), \
  `index_type` VARCHAR(255),  \
  `duration` BIGINT,  \
  `query_time` BIGINT,  \
  `project_name` VARCHAR(255), \
  primary key (`id`,`project_name`) \
);

create.queryhistoryrealization.store.tableindex1=ALTER table %s ADD INDEX %s_ix1(`query_time`);
create.queryhistoryrealization.store.tableindex2=ALTER table %s ADD INDEX %s_ix2(`model`);