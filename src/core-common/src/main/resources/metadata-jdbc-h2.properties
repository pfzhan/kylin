#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


#### JDBC QUERYHISTORY STROE
create.queryhistory.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
    id bigint not null auto_increment,  \
    `query_id` VARCHAR(50),  \
    `sql_text` TEXT,  \
    `sql_pattern` TEXT,  \
    `duration` BIGINT,  \
    `total_scan_bytes` BIGINT,  \
    `total_scan_count` BIGINT,  \
    `result_row_count` BIGINT,  \
    `submitter` VARCHAR(255),  \
    `realizations` TEXT,  \
    `server` VARCHAR(50),  \
    `error_type` VARCHAR(50),  \
    `engine_type` VARCHAR(30),  \
    `cache_hit` BOOLEAN,  \
    `query_status` VARCHAR(20),  \
    `index_hit` BOOLEAN,  \
    `query_time` BIGINT,  \
    `month` VARCHAR(10),  \
    `query_first_day_of_month` BIGINT,  \
    `query_first_day_of_week` BIGINT,  \
    `query_day` BIGINT,  \
    `is_table_index_used` BOOLEAN,  \
    `is_agg_index_used` BOOLEAN,  \
    `is_table_snapshot_used` BOOLEAN,  \
    `project_name` VARCHAR(100),  \
    `reserved_field_1` VARCHAR(50), \
    `reserved_field_2` VARCHAR(50), \
    `reserved_field_3` longblob, \
    `reserved_field_4` longblob, \
    primary key(`id`,`project_name`) \
);

create.queryhistory.store.tableindex1=CREATE INDEX %s_ix1 ON %s ( query_time );
create.queryhistory.store.tableindex2=CREATE INDEX %s_ix2 ON %s ( query_first_day_of_month );
create.queryhistory.store.tableindex3=CREATE INDEX %s_ix3 ON %s ( query_first_day_of_week );
create.queryhistory.store.tableindex4=CREATE INDEX %s_ix4 ON %s ( query_day );
create.queryhistory.store.tableindex5=CREATE INDEX %s_ix5 ON %s ( duration );

create.queryhistoryrealization.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
  id bigint not null auto_increment,  \
  `query_id` VARCHAR(255) , \
  `model` VARCHAR(255),  \
  `layout_id` VARCHAR(255), \
  `index_type` VARCHAR(255),  \
  `duration` BIGINT,  \
  `query_time` BIGINT,  \
  `project_name` VARCHAR(255), \
  primary key (`id`,`project_name`) \
);

create.queryhistoryrealization.store.tableindex1=CREATE INDEX %s_ix1 ON %s ( query_time );
create.queryhistoryrealization.store.tableindex2=CREATE INDEX %s_ix2 ON %s ( model );

# RAW RECOMMENDATION STORE
create.rawrecommendation.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
  `id` int not null auto_increment, \
  `project` varchar(100), \
  `model_id` varchar(40), \
  `unique_flag` varchar(200), \
  `semantic_version` int, \
  `type` tinyint, \
  `rec_entity` text, \
  `depend_ids` text, \
  `layout_metric` text, \
  `cost` double, \
  `total_latency_of_last_day` double, \
  `hit_count` int, \
  `total_time` double, \
  `max_time` double, \
  `min_time` double, \
  `query_history_info` text, \
  `state` tinyint, \
  `create_time` long, \
  `update_time` long, \
  `reserved_field_1` VARCHAR(50), \
  `reserved_field_2` longblob, \
  `reserved_field_3` longblob, \
   primary key(id) \
) DEFAULT CHARSET=utf8;

create.rawrecommendation.store.index=

create.epoch.store.table=create table if not exists %s ( \
    %s int null, \
    %s varchar(255) null, \
    %s varchar(2000) null, \
    %s bigint null, \
    %s varchar(10) null, \
    %s varchar(5000) null, \
    %s bigint null, \
    `reserved_field_1` VARCHAR(50), \
    `reserved_field_2` longblob, \
    `reserved_field_3` longblob, \
    constraint %s_%s_uindex unique (%s) \
);

#### JDBC STREAMING JOB STATS STORE
create.streamingjobstats.store.table=CREATE TABLE IF NOT EXISTS %s ( \
    id bigserial, \
    job_id   VARCHAR(255) , \
    project_name  VARCHAR(255), \
    batch_row_num   BIGINT, \
    rows_per_second  double precision, \
    processing_time BIGINT, \
    min_data_latency BIGINT, \
    max_data_latency BIGINT, \
    create_time BIGINT, \
    reserve1 VARCHAR(255) , \
    reserve2 VARCHAR(255) , \
    reserve3 VARCHAR(255) , \
    reserve4 VARCHAR(255) , \
    reserve5 BIGINT, \
    reserve6 BIGINT, \
    reserve7 BIGINT, \
    reserve8 BIGINT, \
    reserve9 BIGINT, \
    primary key(id) \
);

create.streamingjobstats.store.tableindex1=CREATE INDEX %s_idx1 ON %s ( job_id );
create.streamingjobstats.store.tableindex2=CREATE INDEX %s_idx2 ON %s ( create_time );

#### JDBC STREAMING JOB RECORD STORE
create.streamingjobrecord.store.table=CREATE TABLE IF NOT EXISTS %s ( \
    id serial, \
    job_id   VARCHAR(255) , \
    project  VARCHAR(255), \
    action  VARCHAR(30), \
    create_time BIGINT, \
    update_time BIGINT, \
    reserve1 VARCHAR(255) , \
    reserve2 VARCHAR(255) , \
    reserve3 VARCHAR(255) , \
    reserve4 VARCHAR(255) , \
    reserve5 BIGINT, \
    reserve6 BIGINT, \
    reserve7 BIGINT, \
    reserve8 BIGINT, \
    reserve9 BIGINT, \
    primary key(id) \
);

create.streamingjobrecord.store.tableindex1=CREATE INDEX %s_idx1 ON %s ( job_id );
create.streamingjobrecord.store.tableindex2=CREATE INDEX %s_idx2 ON %s ( create_time );

### jdbc distributed lock
create.jdbc.distributed.lock.table=CREATE TABLE %sLOCK  ( \
LOCK_KEY CHAR(36) NOT NULL, \
REGION VARCHAR(100) NOT NULL, \
CLIENT_ID CHAR(255), \
CREATED_DATE TIMESTAMP NOT NULL, \
constraint %sLOCK_PK primary key (LOCK_KEY, REGION) \
);

#### JDBC SHARESTATE STORE
create.sharestate.store.table=CREATE TABLE IF NOT EXISTS `%s` ( \
    `instance_name` VARCHAR(100), \
    `share_state` varchar(2000), \
    primary key(`instance_name`) \
);

create.sharestate.store.tableindex1=CREATE INDEX %s_ix1 ON %s ( instance_name );
