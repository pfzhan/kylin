options {
    IGNORE_CASE = true;
    STATIC = false;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(CommentParser)
package io.kyligence.kap.query.util;

import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class CommentParser {

    private final static Logger logger = LoggerFactory.getLogger(CommentParser.class);


    public static void main(String args[]) throws ParseException {
        System.out.println("Input SQL:");
        Scanner reader = new Scanner(System.in, Charset.defaultCharset().name());
        String sql = reader.nextLine();
        reader.close();
        CommentParser parser = new CommentParser(new StringReader(sql));
        String parseResult = parser.Input();
        System.out.println("Translated SQL:");
        System.out.println(parseResult);
    }

    public CommentParser(String sql) {
        this(new StringReader(sql));
    }
}

PARSER_END(CommentParser)

//< DEFAULT, ESCAPE, FUNCTION >
//SKIP :
//{
//  "\t"
//| "\n"
//| "\r"
//}

<DEFAULT>
SKIP : {
    <"--" (~["\n","\r"])*>
}

<DEFAULT>
SKIP :
{
    "/**/"
    | <"/*" ~["+"]> : WITHINCOMMENT
}

<WITHINCOMMENT>
SKIP :
{
  "*/" : DEFAULT
}

<WITHINCOMMENT>
MORE :
{
  < ~[] >
}

<WITHIN_QUOTE>
TOKEN :
{
  <QUOTED_STRING : (~["'"])+ >
| <END_QUOTE: "'"> : DEFAULT
}

<WITHIN_DOUBLE_QUOTE>
TOKEN :
{
  <DOUBLE_QUOTE_STRING : (~["\""])+ >
| <END_DOUBLE_QUOTE: "\"" > : DEFAULT
}

< DEFAULT >
TOKEN :
{
  < QUOTE: "'" > : WITHIN_QUOTE
| < DOUBLE_QUOTE: "\"" > : WITHIN_DOUBLE_QUOTE
| < REMAIN_TOKEN : [" ", "\t","\n", "\r", ",", "/", "-" ] >
| < ANY : (~[" ", ",", "\t", "\n", "\r", "/", "-", "'", "\"" ])+ >
| < HINT_BEG: "/*+" >
| < COMMENT_END: "*/" >
| < HINT: <HINT_BEG> (~["\n", "\r", "*", "/"])* <COMMENT_END> >
}


/** Root production. */
String Input() :
{
    String innerString;
    StringBuilder transformedStr = new StringBuilder();
}
{
    (
    LOOKAHEAD(2)
    innerString = Expression()
    {
        transformedStr.append(innerString);
    }
    )+
    <EOF>
    {
        return transformedStr.toString();
    }
}

/** Brace counting production. */
String Expression() :
{
    String innerString = "";
    String nextString = "";
}
{
    {
        if (Thread.currentThread().isInterrupted()) {
            throw new ParseException("CommentParser is interrupted");
        }
    }
    (
     innerString = QuotedString()
    | innerString = DoubleQuoteString()
    | innerString = RemainToken()
    | innerString = Any()
    | innerString = Hint()
    )
    {
        return innerString + nextString;
    }
}

String Hint():
{}
{
    <HINT>
    {
        logger.trace("meet token <HINT>");
        return getToken(0).image;
    }
}

String RemainToken() :
{}
{
    < REMAIN_TOKEN >
    {
        logger.trace("meet token <REMAIN_TOKEN>");
        return getToken(0).image;
    }
}

String QuotedString() :
{
    String str;
}
{
    <QUOTE>
    (
        <END_QUOTE>
        {
          return "''";
        }
    |   <QUOTED_STRING>
        {
            str = getToken(0).image;
            logger.trace("meet token in <QUOTED_STRING>: " + getToken(0).image);
        }
        <END_QUOTE>
        {
            return "'" + str + "'";
        }
    )
}

String DoubleQuoteString() :
{
    String str;
}
{
    <DOUBLE_QUOTE>
    (
        <END_DOUBLE_QUOTE>
        {
            return "\"\"";
        }
        | <DOUBLE_QUOTE_STRING>
          {
            str = getToken(0).image;
            logger.trace("meet token in <QUOTED2_STRING>: " + getToken(0).image);
          }
          <END_DOUBLE_QUOTE>
          {
            return "\"" + str + "\"";
          }
    )
}

String Any() :
{}
{
    < ANY >
    {
        logger.trace("meet token in <ANY>: " + getToken(0).image);
        return getToken(0).image;
    }
}