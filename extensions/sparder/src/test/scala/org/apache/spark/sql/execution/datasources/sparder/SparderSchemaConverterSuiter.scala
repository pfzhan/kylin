/*
 * Copyright (C) 2016 Kyligence Inc. All rights reserved.
 *
 * http://kyligence.io
 *
 * This software is the confidential and proprietary information of
 * Kyligence Inc. ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * Kyligence Inc.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.apache.spark.sql.execution.datasources.sparder

import java.nio.ByteBuffer
import java.util

import com.google.common.collect.Lists
import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.Path
import org.apache.kylin.gridtable.GTInfo
import org.apache.parquet.format.converter.ParquetMetadataConverter
import org.apache.parquet.hadoop.ParquetFileReader
import org.apache.parquet.hadoop.metadata.ParquetMetadata
import org.apache.spark.sql.execution.utils.HexUtils
import org.apache.spark.sql.types.{BinaryType, StructField, StructType}
import org.apache.spark.sql.{GTInfoSchema, TestConstants}

import scala.collection.JavaConverters._

class SparderSchemaConverterSuiter extends org.scalatest.FunSuite {
  val multGtinfo = "2e6f72672e6170616368652e6b796c696e2e637562652e677269647461626c652e43756265436f646553797374656d0004007eaced0005737200296f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e46697865644c656e44696d456e6300000000000000010c00007872002c6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e44696d656e73696f6e456e636f64696e6700000000000000010c000078707702000c78008f82aced00057372002d6f72672e6170616368652e6b796c696e2e637562652e677269647461626c652e5472696d6d656444696d456e6300000000000000010c00007872002c6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e44696d656e73696f6e456e636f64696e6700000000000000010c000078707702000178008f82aced00057372002d6f72672e6170616368652e6b796c696e2e637562652e677269647461626c652e5472696d6d656444696d456e6300000000000000010c00007872002c6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e44696d656e73696f6e456e636f64696e6700000000000000010c0000787077020001780079aced0005737200246f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e496e7444696d456e6300000000000000010c00007872002c6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e44696d656e73696f6e456e636f64696e6700000000000000010c0000787077020002780d4375626f6964203131343639361407766172636861728e0100ff07696e7465676572ffff08736d616c6c696e74ffff07696e7465676572ffff06626967696e74ffff06626967696e74ffff07646563696d616c130407646563696d616c130407646563696d616c130404686c6c630aff04686c6c630aff04746f706e6404066269746d6170ffff0e657874656e646564636f6c756d6e64ff0e657874656e646564636f6c756d6e64ff0e657874656e646564636f6c756d6e64ff03726177ffff03726177ffff03726177ffff07646563696d616c130400010f04010f03f0010802001e0300e00700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  val deserialize: GTInfo = GTInfo.serializer.deserialize(ByteBuffer.wrap(HexUtils.toBytes(gtinfoHex)))
  private[sparder] val gtinfoHex = "2e6f72672e6170616368652e6b796c696e2e637562652e677269647461626c652e43756265436f646553797374656d0001008e013caced0005737200256f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e4461746544696d456e6300000000000000010c00007872002d6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e41627374726163744461746544696d456e6300000000000000010c00007872002c6f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e44696d656e73696f6e456e636f64696e6700000000000000010c00007870770400000003737200376f72672e6170616368652e6b796c696e2e64696d656e73696f6e2e4461746544696d456e63244461746544696d56616c7565436f64656300000000000000010200014c0008646174617479706574002d4c6f72672f6170616368652f6b796c696e2f6d657461646174612f64617461747970652f44617461547970653b787070780e4375626f69642032303937313532110464617465ffff06626967696e74ffff06626967696e74ffff07646563696d616c130407646563696d616c130407646563696d616c130404686c6c630aff04686c6c630aff04746f706e6404066269746d6170ffff0e657874656e646564636f6c756d6e64ff0e657874656e646564636f6c756d6e64ff0e657874656e646564636f6c756d6e64ff03726177ffff03726177ffff03726177ffff07646563696d616c1304000101040101033e000102c0030200fc
  private[sparder] val path: Path = new Path(TestConstants.TEST_WORK_DIR + "cube/peoLwWAlpT.parquettar")


  test("tarball schema converter") {
    val meta: ParquetMetadata = ParquetFileReader.readFooter(new Configuration(), path, ParquetMetadataConverter.NO_FILTER)
    val structType = new SparderSchemaConverter(primaryKey = 1, tableName = "col").convert(meta.getFileMetaData.getSchema)
    val structType2 = StructType(Seq(
      StructField("col_1", BinaryType, false),
      StructField("col_2", BinaryType, false),
      StructField("col_3", BinaryType, false),
      StructField("col_4", BinaryType, false),
      StructField("col_5", BinaryType, false),
      StructField("col_6", BinaryType, false),
      StructField("col_7", BinaryType, false),
      StructField("col_8", BinaryType, false),
      StructField("col_9", BinaryType, false),
      StructField("col_10", BinaryType, false),
      StructField("col_11", BinaryType, false),
      StructField("col_12", BinaryType, false),
      StructField("col_13", BinaryType, false),
      StructField("col_14", BinaryType, false),
      StructField("col_15", BinaryType, false),
      StructField("col_16", BinaryType, false)
    ))
    assert(structType == structType2)
  }

  test("converter row key ") {
    val info = GTInfo.serializer.deserialize(ByteBuffer.wrap(HexUtils.toBytes(gtinfoHex)))
    val converter = new SparderSchemaConverter(primaryKey = 4, tableName = "col")
    val keys = info.getPrimaryKey.iterator()
    var rowKeyStructFieldList: util.ArrayList[StructField] = Lists.newArrayList()
    while (keys.hasNext) {
      val key = keys.next()
      rowKeyStructFieldList.add(StructField(GTInfoSchema("col", key).toString, BinaryType, nullable = false))
    }
    val structType = StructType(rowKeyStructFieldList.asScala)
    val structType2 = StructType(Seq(
      StructField("col_0", BinaryType, false)))
    assert(structType == structType2)

  }


  test("converter row key2 ") {
    val info = GTInfo.serializer.deserialize(ByteBuffer.wrap(HexUtils.toBytes(gtinfoHex)))
    val converter = new SparderSchemaConverter(primaryKey = 4, tableName = "col")
    val keys = info.getPrimaryKey.iterator()
    var rowKeyStructFieldList: util.ArrayList[StructField] = Lists.newArrayList()
    while (keys.hasNext) {
      val key = keys.next()
      rowKeyStructFieldList.add(StructField(GTInfoSchema("col", key).toString, BinaryType, nullable = false))
    }
    val structType = StructType(rowKeyStructFieldList.asScala)
    val structType2 = StructType(Seq(
      StructField("col_0", BinaryType, false)))
    assert(structType == structType2)

  }
}
